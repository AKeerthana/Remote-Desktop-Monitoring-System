package java_project;


import java.awt.Color;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;

/**
 *
 * @author Vaishnavi
 */
public class serverSingleChat extends javax.swing.JFrame implements Runnable {
Enumeration e,e1;
          String p = null;
         String o = null;
         serverSingleChat server;
    /**
     * Creates new form client
     */
     @Override
    public void run() {
         try {
             String ip = JOptionPane.showInputDialog("Please enter client's name");
             for (e = A_Chat_Server.d.keys(),e1 = A_Chat_Server.d.elements(); e.hasMoreElements() && e1.hasMoreElements();){
                   o=(String) e1.nextElement();
                   System.out.println("%%%%%%%%%%"+o);
                   System.out.println(ip);
                 p=(String) e.nextElement();
                 System.out.println(p+"!!!!!!!!!!!!!!!!!!!!!!!!!!1");
                 if(p.equalsIgnoreCase(ip)){
                     break;
                 }
                 
             }
             s=new Socket(o,1201);
             server=new serverSingleChat();
        server.initComponents();
        chat();
         } catch (IOException ex) {
             Logger.getLogger(serverSingleChat.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }
    static Socket s;
    static DataInputStream din;
    static DataOutputStream dout;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_txt = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        msg_send.setBackground(Color.blue);
        msg_send.setForeground(Color.WHITE);
        Font myFont = new Font("Courier", Font.ITALIC,16);
                msg_send.setFont(myFont);
                 javax.swing.border.Border border1 = BorderFactory.createLineBorder(Color.black);
                 //javax.swing.border.Border border2 = BorderFactory.createLineBorder(Color.blue);
               //msg_send.setBorder(border2);
                msg_txt.setBorder(border1);
                msg_area.setBorder(border1);
                jScrollPane1.setBorder(new LineBorder(Color.black));
                msg_area.setEditable(false);
       // setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent evt) {
                //frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                int confirm = JOptionPane.showOptionDialog(
             null, "Are You Sure to Close Application?", 
             "Exit Confirmation", JOptionPane.YES_NO_OPTION, 
             JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (confirm == 0) {
           setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
              
   }
        });

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        msg_txt.setText("");

        msg_send.setText("SEND");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(msg_send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(msg_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_send, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        try{
             String msgout="";
        msgout=msg_txt.getText().trim();
        dout.writeUTF(msgout);
        msg_area.setText(msg_area.getText().trim()+"\n Server : "+msgout);
         msg_txt.setText("");
        }
        catch(Exception e){
            
        }
       
        
        
    }                                        

    /**
     * @param args the command line arguments
     */
    public void chat() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(serverSingleChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(serverSingleChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(serverSingleChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(serverSingleChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                server.setVisible(true);
            }
        });
        try{
            String name1 = s.getInetAddress().getHostName();
             Enumeration e,e1;
            String p = null;
             String o = null;
              for (e = A_Chat_Server.d.keys(),e1 = A_Chat_Server.d.elements(); e.hasMoreElements() && e1.hasMoreElements();){
                   o=(String) e1.nextElement(); 
                 p=(String) e.nextElement();
                 
                 if(o.equalsIgnoreCase(name1)){
                     break;
                 }
                 
             }
            din=new DataInputStream(s.getInputStream());
            dout=new DataOutputStream(s.getOutputStream());
            String msgin="";
            while(!msgin.equals("exit")){
                msgin=din.readUTF();
                msg_area.setText(msg_area.getText().trim()+"\n"+p+" : "+msgin);
                
            }
            
        }
        catch (Exception e){
            
        }
        
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_txt;
    // End of variables declaration                   

   
}

